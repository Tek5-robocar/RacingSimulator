on:
  push:
    branches:
      - unity

jobs:
  build:
    env:
      UNITY_PROJECT_PATH: 'RacingSimulator'
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          clean: ${{ github.event.inputs.clean == 'true' }}
          lfs: true
          submodules: 'recursive'

      - name: Set up Unity
        uses: game-ci/unity-builder@v2
        with:
          unityVersion: '2022.3.5f1' # Adjust Unity version as needed
          targetPlatform: StandaloneWindows64

      - name: Activate Unity License
        run: |
          echo "Activating Unity license..."
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_USERNAME }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

      - name: Add Build Pipeline Package
        working-directory: ${{ env.UNITY_PROJECT_PATH }}
        run: |
          npm install -g openupm-cli
          openupm add com.virtualmaker.buildalon

      - name: Validate Unity Project
        run: |
          echo "Validating Unity project..."
          unity-editor -batchmode -quit -executeMethod Buildalon.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject
        env:
          UNITY_EDITOR_PATH: /Applications/Unity/Hub/Editor/2022.3.5f1/Unity.app/Contents/MacOS/Unity

      - name: Build Unity Project
        run: |
          echo "Building Unity project..."
          unity-editor -batchmode -quit -executeMethod Buildalon.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild
        env:
          UNITY_EDITOR_PATH: /Applications/Unity/Hub/Editor/2022.3.5f1/Unity.app/Contents/MacOS/Unity

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: 'Unity-Build-${{ github.run_number }}.${{ github.run_attempt }}'
          path: |
            ${{ github.workspace }}/**/*.log
            ${{ env.UNITY_PROJECT_PATH }}/Builds/StandaloneWindows64/**/*.exe
            ${{ env.UNITY_PROJECT_PATH }}/Builds/StandaloneWindows64/**/*.dll
            ${{ env.UNITY_PROJECT_PATH }}/Builds/StandaloneWindows64/**/*_Data
            ${{ env.UNITY_PROJECT_PATH }}/Builds/StandaloneWindows64/MonoBleedingEdge/

      - name: Clean Artifacts
        if: always()
        shell: pwsh
        run: |
          # Clean Logs
          Get-ChildItem -Path "${{ env.UNITY_PROJECT_PATH }}" -File -Filter "*.log" -Recurse | Remove-Item -Force

          $artifacts = "${{ env.UNITY_PROJECT_PATH }}/Builds"
          Write-Host "::debug::Build artifacts path: $artifacts"

          if (Test-Path -Path $artifacts) {
            try {
              Remove-Item $artifacts -Recurse -Force
            } catch {
              Write-Warning "Failed to delete artifacts folder file: $_"
            }
          } else {
            Write-Host "::debug::Artifacts folder not found."
          }